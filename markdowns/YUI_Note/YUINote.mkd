#YUI Note

##yui.js##

###YUI模块###
YUI也是采用的模块加载机制，类似与seajs这种加载机制


###instanceOf函数###
为什么需要hasOwnProperty

    instanceOf = function(o, type) {
        return (o && o.hasOwnProperty && (o instanceof type));
    }


###构造函数兼容直接调用而不用new的方法###

    function YUI(){
        var Y=this;
        if(!(instanceof(this,YUI)){
            Y=new YUI();
        }
        //doOtherInit();
        return Y;
    }

###很朴素的add和remove函数###

    add = function(el, type, fn, capture) {
        if (el && el.addEventListener) {
            el.addEventListener(type, fn, capture);
        } else if (el && el.attachEvent) {
            el.attachEvent('on' + type, fn);
        }
    }
    remove = function(el, type, fn, capture) {
        if (el && el.removeEventListener) {
            // this can throw an uncaught exception in FF
            try {
                el.removeEventListener(type, fn, capture);
            } catch (ex) {}
        } else if (el && el.detachEvent) {
            el.detachEvent('on' + type, fn);
        }
    }

###简洁的命名###
    Y.Array.dedupe
扩展函数名字与原生函数一致，只不过名字空间是在自己的闭包里面，dedupe名字起的很简洁，一目了然

###正则表达式###
    _BASE_RE: /(?:\?(?:[^&]*&)*([^&]*))?\b(simpleyui|yui(?:-\w+)?)\/\2(?:-(min|debug))?\.js/,

?:单纯分组，不在match的结果里面

    path = RegExp.leftContext || src.slice(0, src.indexOf(match[0]));

leftContext
>leftContext属性表示在最近一次匹配的位置之前的字符串
