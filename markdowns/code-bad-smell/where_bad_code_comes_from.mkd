腐烂的代码是如何来的

好久之前就想写一个这个文章了，不是因为别的，而是因为被此深深折磨过。关于如何防止
代码腐烂，这里有一篇好文章[如何防止代码腐烂]，每次看都觉得和自己所遇到的情况很相
似，后来一看出处，原来也是自己公司的人写的，难怪写的那么入理，那我这边说一下自己
对于代码腐烂的亲身感受吧。


1 开发人员在某领域水平参差不齐

本人之前两年主要在web前端开发的岗位，去的时候之前的部门主要是从前台开发做起，当时
去的时候专门的前台开发比较少，有三四个开发组，基本上都是后台和前台都做，而由于这
边招人基本上都是招的后端开发，而前端基本上都是过来现学现用的状态，所以代码方面有两个
比较明显的特点：1 后台代码风格比较重，比如喜欢面向过程，而不喜欢面向对象，喜欢用全局
变量这种简单但是容易带来问题的代码 2 很多代码都没有经过设计，因为对于他们来说只
要完成功能就好了，设计或者维护的问题根本没有考虑过。

2 代码风格不一

这个问题确实很头痛，就拿我们组来说，也就三四个前端，大概就有三四种风格吧，而且导
致的问题就是一断代码看过去，一看就知道是几个人写的，对于这个问题，我觉得有两个点没有
做好：一个就是前端代码规范没有制定和执行好，第二个就是没有代码check in之前的
review或者说用相应的检测工具来检测。关于之前团队为什么前端代码规范没有制定好，这
是因为那个规范是好几年前的规范了，只能说是一些格式和命名的规范，但是对于一些高级
的比如类如何构造，如何继承或者一些best practice没有很好的规范，这就导致在这些问
题上面就有很多种不同的方法，没有执行好是因为规范没有向下传达，然后旧代码容易让后
来的新手或者经验不多的人不好的示范。

3 模块没有具体到责任人

如果一个模块没有具体到责任人，有如下的原因会导致代码腐烂。1 开发人员缺乏对整个模块的之前的
设计以及演进历史，写出来的代码不大容易照顾全局，很容易导致新增加的内容与原本系统
的总体方向不一致；由于开发人员修改的不是一个自己负责的产品，很可能产生一种心里就
是这个东西不是我负责，我就


人有一种心里就是只对自己做的事情负责，而对于不是自己做的事情，很容易产生事不关己
高高挂起的态度，很多时候这种心态也是造成集体无意识的导火索。如果一个模块没有一个具体的负责人来负责，每一个修改这个模块的人都不一定会
会因为不理解老代码，所以
出问题也找不到责任人，所以修改这个模
块的人一个缺少对这个模块的整体的了解，二个就是如果老代码没写好，开发人员就会容易
在修改代码的时候不够尽力。

4 进度的压力

这个从进公司开始，进度好像就没有松过，刚进来的时候听说需求已经排了有半年了，这里
感觉开发做完一个需求，马上又有另外一个需求来了，一般进度的安排可能是让你能够有多
一点时间做完，所以基本上没有时间对于做的东西做更多的优化和思考。开发人员以完成需
求为标准，而不是能够很好的完成需求为标准以及不引入系统复杂性为标准，这导致的问题
就是开发人员不会考虑自己引入的东西对于整个系统稳定性以及简单性的破坏。进度的压力
会让开发者挤不出时间来进行重构和整体的梳理，也没有时间在做之前对全局有个比较深入
的了解，这样只能看着整个系统来慢慢腐烂。

5 混乱的需求

混乱的需求表现为：1 没有一个整体的需求，也没有文档沉淀(理由是尼玛的快速迭代，不需
要文档)，特别是对于公共的模块来说，逻辑基本上只存在在混乱的代码中。 2 对于主要模块
来说，需求可能来自不同的产品经理，开发也是来自不同的组，就像盲人摸象，看不到全貌的
情况下，所以每个人眼里的东西都是不同的，导致的问题就是各种不同风格的需求都往一个模块
里面堆；3 产品经理喜欢改版，有的产品模块可能一年就换了几个负责人，下一个复杂人刚上不
久，就改版一下，也没有深入的了解之前的这个模块有哪些功能，如果开发也是新开发的话
，就会容易导致出问题，比如漏掉了某些部分等等。4 产品由于涉及到一些自己的可能相关
的利益，所以有一些产品的设计没有从整体考虑，导致整个看过去感觉像是一个满身打满
各种补丁的衣服，那有谁会喜欢这种衣服呢。

6 作为一个产品的团队，我觉得有必要把整个产品以及产品团队当作一个整体来看待，就像
一个人一样，有时候我们可以赶的急一点，但是如果一直赶的很急，身体总有一天会垮掉，
所以我们要适当的时候进行一下休息，这样才有可能恢复精力，要么就不赶路，每天走一段
休息一段，这样才可以持续长久地进行下去，所以团队的领导必须有这样的能力，如果发现
身体不行了，就得停下来休息，或者不让那种出现很赶的问题出现。


参考：
[如何防止代码腐烂]:http://djt.qq.com/article-14-1.html
